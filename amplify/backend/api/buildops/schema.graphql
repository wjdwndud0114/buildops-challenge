type Employee
  @model(mutations: { create: "createEmployee", update: "updateEmployee" }) {
  id: ID!
  firstname: String!
  lastname: String!
  addresses: [Address] @connection(keyName: "ofEmployee", fields: ["id"])
  skills: [EmployeeSkill]
    @connection(keyName: "employeeOfSkill", fields: ["id"])
}
type Address @model @key(name: "ofEmployee", fields: ["employeeId"]) {
  id: ID!
  employeeId: ID!
  line1: String!
  line2: String
  city: String!
  state: String!
  zipcode: String!
  employee: Employee @connection(fields: ["employeeId"])
}
type EmployeeSkill
  @model(queries: { list: "listEmployeeSkills" })
  @key(name: "employeeOfSkill", fields: ["employeeId", "skillId"])
  @key(name: "skillOfEmployee", fields: ["skillId", "employeeId"]) {
  id: ID!
  employeeId: ID!
  skillId: ID!
  employee: Employee! @connection(fields: ["employeeId"])
  skill: Skill! @connection(fields: ["skillId"])
}
type Skill
  @model(
    mutations: { create: "createSkill", update: "updateSkill", delete: null }
  ) {
  id: ID!
  name: String!
  employees: [EmployeeSkill]
    @connection(keyName: "skillOfEmployee", fields: ["id"])
}

type Subscription {
  onDeleteEmployee: Employee @aws_subscribe(mutations: ["deleteEmployee"])
  onDeleteSkill: Skill @aws_subscribe(mutations: ["deleteSkill"])
}

type Mutation {
  deleteSkill(
    input: DeleteSkillInput!
    condition: ModelSkillConditionInput
  ): Skill @function(name: "deletecascade-${env}")
  deleteEmployee(
    input: DeleteEmployeeInput!
    condition: ModelEmployeeConditionInput
  ): Employee @function(name: "deletecascade-${env}")
}

input DeleteEmployeeInput {
  id: ID
}

input DeleteSkillInput {
  id: ID
}

input ModelSkillConditionInput {
  name: ModelStringInput
  and: [ModelSkillConditionInput]
  or: [ModelSkillConditionInput]
  not: ModelSkillConditionInput
}

input ModelEmployeeConditionInput {
  firstname: ModelStringInput
  lastname: ModelStringInput
  and: [ModelEmployeeConditionInput]
  or: [ModelEmployeeConditionInput]
  not: ModelEmployeeConditionInput
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}
